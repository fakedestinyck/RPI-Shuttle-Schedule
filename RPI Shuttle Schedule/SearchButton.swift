//
//  SearchButton.swift
//
//  Created on 9/9/17.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class SearchButton: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawSearch1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 630), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 630), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 630)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 375, resizedFrame.height / 630)
        
        /// Background Color
        UIColor.clear.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 3
        context.saveGState()
        context.setShadow(
            offset: CGSize(width: 0 * resizedShadowScale, height: 4 * resizedShadowScale),
            blur: 10 * resizedShadowScale,
            color: UIColor(white: 0, alpha: 0.11).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 16, y: 71)
            
            /// Group 10
            do {
                context.saveGState()
                context.translateBy(x: 47, y: 287)
                
                /// Rectangle 2
                let rectangle2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 250, height: 51), cornerRadius: 28)
                context.saveGState()
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle2.cgPath)
                context.addRect(rectangle2.bounds.insetBy(dx: -12, dy: -17))
                context.clip(using: .evenOdd)
                context.translateBy(x: -263, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 263, y: 5)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.714, saturation: 0.515, brightness: 0.945, alpha: 0.49).cgColor)
                }
                UIColor.black.setFill()
                rectangle2.fill()
                context.restoreGState()
                UIColor(hue: 0.713, saturation: 0.515, brightness: 0.946, alpha: 0.4).setFill()
                rectangle2.fill()
                context.restoreGState()
                
                /// Search
                let search = NSMutableAttributedString(string: "Search")
                search.addAttribute(NSFontAttributeName, value: UIFont(name: ".AppleSystemUIFont", size: 25)!, range: NSRange(location: 0, length: search.length))
                search.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.59, saturation: 0.778, brightness: 1, alpha: 0.9), range: NSRange(location: 0, length: search.length))
                search.addAttribute(NSKernAttributeName, value: -0.43, range: NSRange(location: 0, length: search.length))
                context.saveGState()
                search.draw(at: CGPoint(x: 88, y: 11))
                context.restoreGState()
                
                context.restoreGState()
            }
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfSearch1() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 630), false, 0)
        SearchButton.drawSearch1()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
